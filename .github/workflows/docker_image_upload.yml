name: docker image upload

on:
  workflow_call:
    inputs:
      VERSION_NUMBER:
        required: true
        type: string
      COMMIT_ID:
        required: true
        type: string
      AWS_ENVIRONMENT:
        required: true
        type: string
      TAG_LATEST:
        required: true
        type: boolean
      DOCKER_IMAGE_TAG:
        required: true
        type: string
    secrets:
      CDK_PUSH_IMAGE_ROLE:
        required: true

jobs:
  upload_docker_image:
    runs-on: ubuntu-22.04
    environment: ${{ inputs.AWS_ENVIRONMENT }}
    permissions:
      id-token: write
      contents: write

    steps:
      - name: Checkout local github actions
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          ref: ${{ env.BRANCH_NAME }}
          fetch-depth: 0
          sparse-checkout: |
            .github

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@00943011d9042930efac3dcd3a170e4273319bc8
        with:
          aws-region: eu-west-2
          role-to-assume: ${{ secrets.CDK_PUSH_IMAGE_ROLE }}
          role-session-name: upload-cdk-utils-build

      - name: docker_artifact download
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0
        with:
          name: docker_artifact
          path: .

      - name: Extract cdk-utils-build docker image
        id: extract-cdk-utils-build-image
        run: |
          docker load -i cdk-utils-build.img

      - name: Retrieve AWS Account ID
        id: retrieve-account-id
        run: echo "ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" >> "$GITHUB_ENV"

      - name: Login to Amazon ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin ${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com

      - name: Push tagged version cdk-utils-build to Amazon ECR
        env:
          VERSION_NUMBER: ${{ inputs.VERSION_NUMBER }}
          DOCKER_IMAGE_TAG: ${{ inputs.DOCKER_IMAGE_TAG }}
        run: |
          docker tag "cdk-utils-build:${VERSION_NUMBER}" "${ACCOUNT_ID}.dkr.ecr.eu-west-2.amazonaws.com/cdk-utils-build-repo:${DOCKER_IMAGE_TAG}"
          docker push "${ACCOUNT_ID}.dkr.ecr.eu-west-2.amazonaws.com/cdk-utils-build-repo:${DOCKER_IMAGE_TAG}"

      - name: Push latest cdk-utils-build to Amazon ECR
        if: ${{ inputs.TAG_LATEST == true }}
        env:
          VERSION_NUMBER: ${{ inputs.VERSION_NUMBER }}
        run: |
          docker tag "cdk-utils-build:${VERSION_NUMBER}" "${ACCOUNT_ID}.dkr.ecr.eu-west-2.amazonaws.com/cdk-utils-build-repo:latest"
          docker push "${ACCOUNT_ID}.dkr.ecr.eu-west-2.amazonaws.com/cdk-utils-build-repo:latest"

      - name: Check cdk-utils-build scan results
        env:
          REPOSITORY_NAME: cdk-utils-build-repo
          IMAGE_TAG: ${{ inputs.DOCKER_IMAGE_TAG }}
        working-directory: .github/scripts
        run: |
          ./check_ecr_image_scan_results.sh
