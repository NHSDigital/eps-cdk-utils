name: build_pr

on:
  pull_request:
    branches: [main]

env:
  BRANCH_NAME: ${{ github.event.pull_request.head.ref }}

jobs:
  pr_title_format_check:
    uses: NHSDigital/eps-workflow-semantic-release/.github/workflows/pr_title_check.yml@13024fccca97e125d448ca9bc4616cfd413197fe

  quality_checks:
    uses: NHSDigital/eps-workflow-quality-checks/.github/workflows/quality-checks.yml@v4.1.3
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  dependabot-auto-approve-and-merge:
    needs: quality_checks
    uses: NHSDigital/eps-workflow-dependabot/.github/workflows/dependabot-auto-approve-and-merge.yml@5dd998ea44b2e412ea51544b565be3d67f54dc41
    secrets:
      AUTOMERGE_APP_ID: ${{ secrets.AUTOMERGE_APP_ID }}
      AUTOMERGE_PEM: ${{ secrets.AUTOMERGE_PEM }}

  get_issue_number:
    runs-on: ubuntu-22.04
    outputs:
      issue_number: ${{steps.get_issue_number.outputs.result}}

    steps:
      - uses: actions/github-script@v8
        name: get issue number
        id: get_issue_number
        with:
          script: |
            if (context.issue.number) {
              // Return issue number if present
              return context.issue.number;
            } else {
              // Otherwise return issue number from commit
              return (
                await github.rest.repos.listPullRequestsAssociatedWithCommit({
                  commit_sha: context.sha,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                })
              ).data[0].number;
            }
          result-encoding: string

  get_commit_id:
    runs-on: ubuntu-22.04
    outputs:
      commit_id: ${{ steps.commit_id.outputs.commit_id }}
      sha_short: ${{ steps.commit_id.outputs.sha_short }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: ${{ env.BRANCH_NAME }}

      - name: Get Commit ID
        id: commit_id
        run: |
          echo "commit_id=${{ github.sha }}" >> "$GITHUB_OUTPUT"
          echo "sha_short=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"

  package_docker_image:
    needs: [get_issue_number, quality_checks, get_commit_id]
    uses: ./.github/workflows/docker_image_build.yml
    with:
      VERSION_NUMBER: PR-${{ needs.get_issue_number.outputs.issue_number }}
      COMMIT_ID: ${{ needs.get_commit_id.outputs.commit_id }}

  package_npm_code:
    needs: [get_issue_number, quality_checks, get_commit_id]
    uses: ./.github/workflows/package_npm_code.yml

  release_docker_image:
    needs: [get_issue_number, package_docker_image, get_commit_id]
    uses: ./.github/workflows/docker_image_upload.yml
    with:
      AWS_ENVIRONMENT: dev
      VERSION_NUMBER: PR-${{ needs.get_issue_number.outputs.issue_number }}
      COMMIT_ID: ${{ needs.get_commit_id.outputs.commit_id }}
      TAG_LATEST: false
      DOCKER_IMAGE_TAG: PR-${{ needs.get_issue_number.outputs.issue_number }}-${{ needs.get_commit_id.outputs.sha_short }}
    secrets:
      CDK_PUSH_IMAGE_ROLE: ${{ secrets.DEV_CDK_PUSH_IMAGE_ROLE }}
