name: merge to main workflow

on:
  push:
    branches: [main]

env:
  BRANCH_NAME: ${{ github.ref_name }}

jobs:
  quality_checks:
    uses: NHSDigital/eps-workflow-quality-checks/.github/workflows/quality-checks.yml@v5.1.0
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  get_commit_id:
    runs-on: ubuntu-22.04
    outputs:
      commit_id: ${{ steps.commit_id.outputs.commit_id }}
    steps:
      - name: Get Commit ID
        id: commit_id
        run: |
          echo "commit_id=${{ github.sha }}" >> "$GITHUB_OUTPUT"

  tag_release:
    needs: quality_checks
    runs-on: ubuntu-22.04
    outputs:
      version_tag: ${{steps.output_version_tag.outputs.VERSION_TAG}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: ${{ env.BRANCH_NAME }}
          fetch-depth: 0

      # using git commit sha for version of action to ensure we have stable version
      - name: Install asdf
        uses: asdf-vm/actions/setup@1902764435ca0dd2f3388eea723a4f92a4eb8302
        with:
          asdf_branch: v0.14.1

      - name: Cache asdf
        uses: actions/cache@v4
        with:
          path: |
            ~/.asdf
          key: ${{ runner.os }}-asdf-${{ hashFiles('**/.tool-versions') }}
          restore-keys: |
            ${{ runner.os }}-asdf-

      - name: Install asdf dependencies in .tool-versions
        uses: asdf-vm/actions/install@1902764435ca0dd2f3388eea723a4f92a4eb8302
        with:
          asdf_branch: v0.14.1
        env:
          PYTHON_CONFIGURE_OPTS: --enable-shared

      - name: Setting up .npmrc
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "//npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}" >> ~/.npmrc
          echo "@NHSDigital:registry=https://npm.pkg.github.com" >> ~/.npmrc

      - name: Install node packages
        run: |
          make install-node

      - name: Set VERSION_TAG env var to be short git SHA and get next tag version
        id: output_version_tag
        run: |
          VERSION_TAG=$(git rev-parse --short HEAD)
          npx semantic-release --dry-run > semantic-release-output.log
          NEXT_VERSION=$(grep -i 'The next release version is' semantic-release-output.log | sed -E 's/.* ([[:digit:].]+)$/\1/')
          if [ -z "${NEXT_VERSION}" ]
          then
            echo "Could not get next tag. Here is the log from semantic-release"
            cat semantic-release-output.log
            exit 1
          fi
          tagFormat=$(node -e "const config=require('./release.config.js'); console.log(config.tagFormat)")
          if [ "${tagFormat}" = "null" ]
          then
            tagFormat="v\${version}"
          fi
          # disabling shellcheck as replace does not work
          # shellcheck disable=SC2001
          VERSION_TAG=$(echo "$tagFormat" | sed "s/\${version}/$NEXT_VERSION/")
          echo "## VERSION TAG : ${VERSION_TAG}" >> "$GITHUB_STEP_SUMMARY"
          echo "VERSION_TAG=${VERSION_TAG}" >> "$GITHUB_OUTPUT"
          echo "VERSION_TAG=${VERSION_TAG}" >> "$GITHUB_ENV"
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: tag release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release

      - name: Get release for editing
        id: get_release
        # version 1.2.4
        uses: cardinalby/git-get-release-action@5172c3a026600b1d459b117738c605fabc9e4e44
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag: ${{ env.VERSION_TAG }}

      - name: Edit Release
        # version 1.2.0
        uses: irongut/EditRelease@ccf529ad26dddf9996e7dd0f24ca5da4ea507cc2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          id: ${{ steps.get_release.outputs.id }}
          body: |
            ## Info
            [See code diff](${{ github.event.compare }})
            [Release workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            It was initialized by [${{ github.event.sender.login }}](${{ github.event.sender.html_url }})

  package_code:
    needs: [tag_release, quality_checks, get_commit_id]
    uses: ./.github/workflows/docker_image_build.yml
    with:
      VERSION_NUMBER: ${{needs.tag_release.outputs.version_tag}}
      COMMIT_ID: ${{ needs.get_commit_id.outputs.commit_id }}

  release_dev:
    needs: [tag_release, package_code, get_commit_id]
    uses: ./.github/workflows/docker_image_upload.yml
    with:
      AWS_ENVIRONMENT: dev
      VERSION_NUMBER: ${{needs.tag_release.outputs.version_tag}}
      COMMIT_ID: ${{ needs.get_commit_id.outputs.commit_id }}
      TAG_LATEST: true
      DOCKER_IMAGE_TAG: ${{needs.tag_release.outputs.version_tag}}
    secrets:
      CDK_PUSH_IMAGE_ROLE: ${{ secrets.DEV_CDK_PUSH_IMAGE_ROLE }}

  release_qa:
    needs:
      [
        tag_release,
        release_dev,
        package_code,
        get_commit_id,
      ]
    uses: ./.github/workflows/docker_image_upload.yml
    with:
        AWS_ENVIRONMENT: qa
        VERSION_NUMBER: ${{needs.tag_release.outputs.version_tag}}
        COMMIT_ID: ${{ needs.get_commit_id.outputs.commit_id }}
        TAG_LATEST: true
        DOCKER_IMAGE_TAG: ${{needs.tag_release.outputs.version_tag}}
    secrets:
        CDK_PUSH_IMAGE_ROLE: ${{ secrets.QA_CDK_PUSH_IMAGE_ROLE }}
  
  release_ref:
    needs:
      [
        tag_release,
        release_dev,
        package_code,
        get_commit_id,
      ]
    uses: ./.github/workflows/docker_image_upload.yml
    with:
        AWS_ENVIRONMENT: ref
        VERSION_NUMBER: ${{needs.tag_release.outputs.version_tag}}
        COMMIT_ID: ${{ needs.get_commit_id.outputs.commit_id }}
        TAG_LATEST: true
        DOCKER_IMAGE_TAG: ${{needs.tag_release.outputs.version_tag}}
    secrets:
        CDK_PUSH_IMAGE_ROLE: ${{ secrets.REF_CDK_PUSH_IMAGE_ROLE }}
  
  release_int:
    needs:
      [
        tag_release,
        release_qa,
        package_code,
        get_commit_id,
      ]
    uses: ./.github/workflows/docker_image_upload.yml
    with:
        AWS_ENVIRONMENT: int
        VERSION_NUMBER: ${{needs.tag_release.outputs.version_tag}}
        COMMIT_ID: ${{ needs.get_commit_id.outputs.commit_id }}
        TAG_LATEST: true
        DOCKER_IMAGE_TAG: ${{needs.tag_release.outputs.version_tag}}
    secrets:
        CDK_PUSH_IMAGE_ROLE: ${{ secrets.INT_CDK_PUSH_IMAGE_ROLE }}
  
  release_prod:
    needs:
      [
        tag_release,
        release_int,
        package_code,
        get_commit_id,
      ]
    uses: ./.github/workflows/docker_image_upload.yml
    with:
        AWS_ENVIRONMENT: prod
        VERSION_NUMBER: ${{needs.tag_release.outputs.version_tag}}
        COMMIT_ID: ${{ needs.get_commit_id.outputs.commit_id }}
        TAG_LATEST: true
        DOCKER_IMAGE_TAG: ${{needs.tag_release.outputs.version_tag}}
    secrets:
        CDK_PUSH_IMAGE_ROLE: ${{ secrets.PROD_CDK_PUSH_IMAGE_ROLE }}
